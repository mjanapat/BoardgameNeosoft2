pipeline {
    agent any
         tools {
             jdk 'jdk17'
             maven 'maven3'
         }
         environment {
             SCANNER_HOME = tool 'sonar-scanner'
         }
    stages {
        stage('Git CheckOut') {
            steps {
            git branch: 'main', credentialsId: 'git-cred', url: 'https://github.com/mjanapat/BoardgameNeosoft2.git'
            }
        }
        stage('compile') {
            steps {
                sh "mvn compile"
            }
        }
        stage('test') {
            steps {
               sh " mvn test"
            }
        }
        stage('File system scan') {
            steps {
                sh "trivy fs --format table -o trivy-fs-report.html ."
            }
        }
               stage('SonarQube Analsyis') {
            steps {
                withSonarQubeEnv('sonar') {
                    sh ''' $SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=BoardGame -Dsonar.projectKey=BoardGame \
                            -Dsonar.java.binaries=. '''
                }
            }
        }
        stage('Quality Gate checks') {
            steps {
                script{
                    waitForQualityGate abortPipeline: false, credentialsId: 'sonar-token'
                }
            }
        }
        stage('Build') {
            steps {
              sh "mvn package"
            }
        }
        
     stage('Publish Artifactory to Nexus') {
            steps {
             withMaven(globalMavenSettingsConfig: 'global-settings', jdk: 'jdk17', maven: 'maven3', mavenSettingsConfig: '', traceability: true) {
              sh "mvn deploy"
             }
            }
        }
        
        stage('Build and Tag docker image') {
         steps {
           script {
            docker.withRegistry('https://index.docker.io/v1/', 'docker-cred') {
                sh "docker build -t maruthi27/boardshark:latest ."
               }
           }
       }
   }
         stage(' Docker Image scan') {
            steps {
                sh "trivy image --format table -o trivy-image-report.html maruthi27/boardshark:latest"
            }
        }
           stage('Image push to DockerHub') {
            steps {
             script {
                docker.withRegistry('https://index.docker.io/v1/', 'docker-cred') {
                sh "docker push maruthi27/boardshark:latest"
            }
        }
    }
}
        stage('Deploy to kubernetes cluster') {
            steps {
          withKubeConfig(caCertificate: '', clusterName: 'kubernetes', contextName: '', credentialsId: 'k8-cred', namespace: 'webapps', restrictKubeConfigAccess: false, serverUrl: 'https://192.168.56.10:6443') {
              sh "kubectl apply -f deployment-service.yaml"
}
            }
        }
        
         stage('To verify Deploy is done on kubernetes cluster') {
            steps {
          withKubeConfig(caCertificate: '', clusterName: 'kubernetes', contextName: '', credentialsId: 'k8-cred', namespace: 'webapps', restrictKubeConfigAccess: false, serverUrl: 'https://192.168.56.10:6443') {
              sh "kubectl get pods -n webapps"
              sh "kubectl get svc -n webapps"
}
            }
        }
        
     }
}
